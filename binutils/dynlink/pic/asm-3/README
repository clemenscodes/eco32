This program demonstrates the principle for accessing global data.
The difficulty here is that the data may be located in another
executable (i.e., another library) and thus its address may only
be known at run-time. So one more level of indirection is needed,
realized by pointers in the GOT.

For ease of demonstration the data is set up in the same executable
as the code.

First, the address of the code just running is determined. Then, the
distance from the current instruction to the GOT (which is fixed at
link time) is added to the code address, which leaves the actual GOT
address in $3. Next, a pointer to the data location is loaded from
the GOT. (Note that specifying the GOT offset directly within the
ldw instruction restricts the number of entries in the GOT to 8192.)
Finally, the pointer is dereferenced.

runlo: This is of course OK if executed at the link address.
runhi: But it FAILS if executed at any other address! Why is that
so? The data pointer in the GOT isn't updated to the actual data
address.

Note 1: This is a load-time relocation which is applied in the data
segment of the PIC, so it does not harm the position-independence
of the code.

Note 2: If the data is located in another library, the relocation
can only be done when this library is loaded.

Note 3: It is up to the dynamic loader to do the relocation. For
demonstration purposes, the make target 'runhi-reloc' performs
the relocation by patching the binary (but only for this specific
instance of program and relocation amount).
